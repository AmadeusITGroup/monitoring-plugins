#!/usr/bin/env perl

# check_ntp_amadeus - Check reachability of an NTP server. Provides much performance data
#
# Copyright (c) 2015 Amadeus Germany GmbH
#
# License: MIT
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

use strict;
use warnings;

use IPC::Open3;

use Nagios::Plugin;

my $np = Nagios::Plugin->new(
	usage => "Usage: %s [ -v|--verbose ] ",
	version => '1.0.0',
	plugin => 'check_ntp_amadeus',
	blurb => 'Check NTP stats',
);

$np->add_arg(
	spec => 'host|h=s',
	help => [
		'NTP Server to query',
	],
	default => undef,
);

$np->getopts;

my($wtr, $rdr, $err);
use Symbol 'gensym';
$err = gensym;

my $pid = open3($wtr, $rdr, $err, 'ntpq -c sysinfo');

waitpid($pid, 0);
my $child_exit_status = $? >> 8;

if ($child_exit_status != 0) {
  $np->nagios_exit(CRITICAL, "Execution returned $child_exit_status");
}

my $stderr = <$err>;

if (defined($stderr)) {
  $np->nagios_exit(CRITICAL, "Output from plugin: $stderr");
}

my %response;

# Here is a sample output of the ntpq -c sysinfo call:
#
# associd=0 status=0615 leap_none, sync_ntp, 1 event, clock_sync,
# system peer:        ntp2.example.com:123
# system peer mode:   client
# leap indicator:     00
# stratum:            2
# log2 precision:     -22
# root delay:         10.803
# root dispersion:    23.047
# reference ID:       193.23.186.169
# reference time:     dd7791d4.bbe93ba9  Thu, Sep 28 2017 15:20:52.734
# system jitter:      0.221245
# clock jitter:       0.212
# clock wander:       0.032
# broadcast delay:    -50.000
# symm. auth. delay:  0.000

# consume status line
<$rdr>;

while (<$rdr>) {
  my ($k, $v) = split(':', $_, 2);
  $k =~ s/^\s+|\s+$//g ;
  $v =~ s/^\s+|\s+$//g ;
  $v =~ s/ (s|ppm)$//g ;
  $response{$k} = $v;
}

$np->add_perfdata(
  label => 'stratum',
  value => $response{'stratum'},
);

$np->add_perfdata(
  label => 'root_distance',
  value => $response{'root delay'} / 1000,
  uom   => 's',
);

$np->add_perfdata(
  label => 'root_delay',
  value => $response{'root delay'} / 1000,
  uom   => 's',
);

$np->add_perfdata(
  label => 'root_dispersion',
  value => $response{'root dispersion'} / 1000,
  uom   => 's',
);

$np->add_perfdata(
  label => 'precision',
  value => $response{'log2 precision'},
);

$np->add_perfdata(
  label => 'log2_precision',
  value => $response{'log2 precision'},
);

$np->add_perfdata(
  label => 'jitter',
  # FIXME which one is the correct jitter?
  value => $response{'system jitter'} / 1000,
  uom   => 's',
);

$np->add_perfdata(
  label => 'system_jitter',
  value => $response{'system jitter'} / 1000,
  uom   => 's',
);

$np->add_perfdata(
  label => 'clock_jitter',
  value => $response{'clock jitter'} / 1000,
  uom   => 's',
);

$np->add_perfdata(
  label => 'stability',
  value => $response{'clock wander'},
);

$np->add_perfdata(
  label => 'clock_wander',
  value => $response{'clock wander'},
);

$np->nagios_exit(OK, 'Connection to NTP server successful');
