#!/usr/bin/env perl

# check_puppet_agent - Check that puppet agent is not disabled
#
# Copyright (c) 2016 Amadeus Germany GmbH
#
# SPDX-License-Identifier: MIT
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# TODO:
# we could find the lock file via
# `puppet config print --section agent agent_disabled_lockfile`
# But what about different puppet configurations and the overhead of spawning a
# puppet process?

use strict;
use warnings;

use autodie;

### START PLUGIN LOADER
sub load_module {
	my $module;
	eval "require $_" and $module = $_ and last for @_;
	$module->import();
	return $module;
}

my $plugin_module;
BEGIN {
	$plugin_module = load_module('Monitoring::Plugin', 'Nagios::Plugin', 'Nagios::Monitoring::Plugin');
}
### END PLUGIN LOADER

my $np = $plugin_module->new(
	usage => "Usage: %s [ -v|--verbose ]",
	version => '1.0.0',
	plugin => 'check_puppet_agent',
	blurb => 'Check that puppet agent is not disabled',
	license => 'MIT',
);

$np->add_arg(
	spec => 'lockfile|l=s',
	help => 'Lock file to check',
	required => 1,
	default => undef,
);

$np->add_arg(
	spec => 'report-reason',
	help => 'Retrieve the reason from the agent lock',
	default => 0,
);

$np->getopts;

my $f = $np->opts->lockfile;

$np->add_message(OK, 'Puppet agent is enabled');

if (-f $f) {
	my $message = 'Puppet agent is disabled';
	if ($np->opts->{'report-reason'}) {
		require File::Slurp;
		File::Slurp->import;
		require JSON::MaybeXS;
		JSON::MaybeXS->import;
		my $data;
		eval {
			$data = decode_json(read_file($f));
		};
		if ($@) {
			chomp (my $E = $@);
			$np->nagios_exit(CRITICAL,
				sprintf('Error while reading lockfile: "%s".', $E));
		}

		my $dm = $data->{'disabled_message'};

		if (!defined($dm)) {
			$np->nagios_exit(CRITICAL, 'No message found in lockfile');
		}

		$message .= ': ' . $dm;
	}
	$np->add_message(CRITICAL, $message);
}

my ($code, $message) = $np->check_messages();
$np->nagios_exit($code, $message);
