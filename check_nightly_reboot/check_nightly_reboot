#!/usr/bin/env perl

# check_nightly_reboot - Check if the machine is scheduled for a nightly reboot
#
# Copyright (c) 2015 Amadeus Germany GmbH
#
# License: MIT
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

use strict;
use warnings;
use autodie;

use Nagios::Plugin;
use DateTime;
use DateTime::Format::Strptime;

my $np = Nagios::Plugin->new(
	usage => "Usage: %s [ -u|--unit unit ] [--critical]",
	version => '1.0.0',
	plugin => 'check_nightly_reboot',
	blurb => 'Check if the machine will reboot tonight',
);

$np->add_arg(
	spec => 'critical',
	help => [
		'Exit with CRITICAL instead of WARNING if reboot is active',
	],
	default => 0,
);

$np->add_arg(
	spec => 'unit|u=s',
	help => [
		'Unit to check',
	],
	default => 'nightly-reboot.timer',
);

$np->getopts;

system( 'systemctl', [ '--quiet', 'is-active', $np->opts->unit ] );

if ($? == -1) {
	$np->nagios_exit(UNKNOWN, "failed to execute: $!\n");
} elsif ($? & 127) {
	$np->nagios_exit(
		UNKNOWN,
		sprintf("child died with signal %d, %s coredump\n",
			($? & 127),  ($? & 128) ? 'with' : 'without')
	);
}

my $status = $? >> 8;

if ($status == 0) {

	# To stay on the safe side, we need to ensure consistent date/time formatting
	$ENV{'LC_ALL'} = 'en_US.UTF-8';
	$ENV{'TZ'}     = 'UTC';

	# Opening a command as a safe no-shell run
	open(RUNIT, "-|", 'systemctl', ('--no-legend', 'list-timers', $np->opts->unit));
	my $output = readline(RUNIT);
	close(RUNIT);
	#
	# One line is structures like this:
	# NEXT LEFT LAST PASSED UNIT ACTIVATES
	#
	# Real-life sample:
	# Tue 2015-10-27 00:00:00 UTC  14h left  Mon 2015-10-26 09:17:09 UTC  2min 45s ago logrotate.timer   logrotate.service
	#
	my $line = substr($output, 0, 27);

	my $strp = DateTime::Format::Strptime->new(
		pattern   => '%a %Y-%m-%d %H:%M:%S',
	);
	my $reboot_time = $strp->parse_datetime($line);
	my $time_left = $reboot_time->subtract_datetime_absolute(DateTime->now())->seconds;

	$np->add_perfdata(
		label => 'time_left',
		value => $time_left,
		uom => 's',
		min => 0,
	);
	$np->nagios_exit(
		( $np->opts->critical ) ? CRITICAL : WARNING,
		sprintf(
			'This machine is scheduled for reboot tonight (%s)',
			$line,
		));

} elsif ($status == 3) {

	$np->nagios_exit(OK, 'No reboot scheduled');

} else {

	$np->nagios_exit(UNKNOWN, "Unknown result: $status");
}
