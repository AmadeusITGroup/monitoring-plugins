#!/opt/csw/bin/perl

# check_zfs - Checks remaining space and status of zpools
#
# Copyright (c) 2015 Amadeus Germany GmbH
#
# SPDX-License-Identifier: MIT
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

use strict;
use warnings;
use autodie;

### START PLUGIN LOADER
sub load_module {
	my $module;
	eval "require $_" and $module = $_ and last for @_;
	$module->import();
	return $module;
}

my $plugin_module;
BEGIN {
	$plugin_module = load_module('Monitoring::Plugin', 'Nagios::Plugin', 'Nagios::Monitoring::Plugin');
}
### END PLUGIN LOADER

my $np = $plugin_module->new(
	usage => "Usage: %s [ -v|--verbose ] ",
	version => '0.0.1',
	plugin => 'check_zfs',
	blurb => 'Check ZFS pools',
	license => 'MIT',
);

$np->add_arg(
	spec => 'warning|w=s',
	help => [
		'Exit with WARNING status if less than BYTES bytes of disk are free',
		'Exit with WARNING status if less than PERCENT of disk is free',
	],
	label => [ 'BYTES', 'PERCENT%' ],
	default => '20%',
);

$np->add_arg(
	spec => 'critical|c=s',
	help => [
		'Exit with CRITICAL status if less than BYTES bytes of disk are free',
		'Exit with CRITICAL status if less than PERCENT of disk is free',
	],
	label => [ 'BYTES', 'PERCENT%' ],
	default => '10%',
);


$np->getopts;
$np->add_message(OK, 'All ZFS Pools are online and have sufficient space');

##
## FUNCTIONS
##

my %uom_table = (
    'K' => 1024,
    'M' => 1024**2,
    'G' => 1024**3,
    'T' => 1024**4,
    'P' => 1024**5,
    'E' => 1024**6,
    'Z' => 1024**7,
    'Y' => 1024**8,
);

sub calc_threshold {
	my ($total , $spec) = @_;

	if ($spec =~ /(\d+)%$/) {
		return ((100 - $1) / 100) * $total;
	} else {
		return parse_bytes($spec);
	}
}

sub parse_bytes {

    my $expr = shift;
    my( $num, $uom ) = ( undef, undef );

    ( $num, $uom ) = ( $1, $2 )  if( $expr =~ /([\d.]+)([A-Z])/ );

    # Checking we got a proper numerical value
    die("\n".'[ERROR] Impossible to extract number from ('.$expr.') !'."\n")  if( not defined $num );

    # Checking we support the unit of measurement detected
    die("\n".'[ERROR] Unknown unit of measurement ('.$uom.') !'."\n")  if( not defined $uom_table{ $uom } );

    return $num * $uom_table{ $uom };
}

##
## /FUNCTIONS
##


# Opening a command as a safe no-shell run (cannot go with 4 arguments as the perl distro on Solaris does not like it)
open( my $zpool, "-|", 'zpool list -H' );
my @content = $zpool;
close( $zpool );

foreach my $line (@content) {
    my ($name, $size, $alloc, $free, $cap, $health, $altroot) = split("\t", $line);

    my $a = parse_bytes($alloc);
    my $s = parse_bytes($size);

    my $warn     = calc_threshold($s, $np->opts->warning);
    my $critical = calc_threshold($s, $np->opts->critical);

    $np->add_perfdata(
        label => $name,
        value => $a,
        uom => 'B',
        min => 0,
        max => $s,
        warning => $warn,
        critical => $critical,
    );

    my $code = OK;

    if ($a >= $warn) {
        $code = WARNING;
    }
    if ($a >= $critical) {
        $code = CRITICAL;
    }

    if ($code != OK) {
        $np->add_message($code, "Pool '${name}' only has ${free} left (${cap} used)");
    }

    if ($health ne 'ONLINE') {
        $np->add_message(CRITICAL, "Pool '${name}' is ${health}");
    }
}

$np->add_perfdata(
    label => 'num_pools',
    value => scalar(@content),
);

my ($code, $message) = $np->check_messages();
$np->nagios_exit($code, $message);

